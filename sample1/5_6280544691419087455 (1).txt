#####IRCTC  Application.java##############################

package com.cts.irctc;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.cts.irctc.skeletonvalidator.SkeletonValidator;

@SpringBootApplication
public class IrctcApplication {

	public static void main(String[] args) {
		SpringApplication.run(IrctcApplication.class, args);
		
	}

}

#####IRCTC CONTROLLER.JAVA#################

package com.cts.irctc.controller;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


import com.cts.irctc.exception.ApplicationException;
import com.cts.irctc.model.TicketBooking;
import com.cts.irctc.model.TrainInfo;
import com.cts.irctc.service.IrctcService;

@Controller
public class IrctcController {
@Autowired
private IrctcService service;


@Autowired
public IrctcController(IrctcService service) {
this.service = service;
}

@RequestMapping(value = "/showTicketBookingForm", method = RequestMethod.GET)
public String showTicketBookingForm(@ModelAttribute("ticketBooking") TicketBooking ticketBooking) {
ticketBooking = new TicketBooking();

return "ticketBooking";
}

@RequestMapping(value="/getTicketBookingResultPage",method=RequestMethod.POST)
public String getCarSearchResultForm(@Valid @ModelAttribute("ticketBooking") TicketBooking ticketBooking,BindingResult result,ModelMap map) throws ApplicationException {

//Add code here..
if(result.hasErrors())
{
return "ticketBooking";
}

TrainInfo ti = service.getTicketBookingResult(ticketBooking);
if(ti==null) {
// map.addAttribute(Sorry, No train available for given time.)
return "trainNotAvailable";
}else {
String pnr = service.getPNRNumber(ticketBooking);
String completePNR = ti.getTrainNumber().substring(0,3).concat(pnr);

map.addAttribute("pnr",completePNR);
map.addAttribute("tno",ti.getTrainNumber());
map.addAttribute("tname",ti.getTrainName());
map.addAttribute("dot",ticketBooking.getDateOfTravel());
map.addAttribute("dept",ti.getDeparture());
map.addAttribute("duration",ti.getDuration());
map.addAttribute("a",ti.getArrival());
map.addAttribute("price",ti.getFarePerPassenger() * ticketBooking.getNoOfTickets());
}
return "ticketBookingResult"; // TODO, modify this value
}
@ModelAttribute("from")
public List<String> populateFromCities() {
List<String> fromCities = new ArrayList<String>();

fromCities.add("Chennai");
 fromCities.add("Delhi");
 fromCities.add("Bangalore");
 fromCities.add("Pune");

return fromCities;
}

@ModelAttribute("to")
public List<String> populateToCities() {
List<String> toCities = new ArrayList<String>();

 toCities.add("Chennai");
 toCities.add("Delhi");
 toCities.add("Bangalore");
 toCities.add("Pune");

return toCities;
}

@ModelAttribute("classType")
public List<String> populateClassType() {
List<String> classTypes = new ArrayList<String>();
 
classTypes.add("AC First Class (1A)");
 classTypes.add("AC 2 Tier (2A)");
 classTypes.add("AC 3 Tier (3A)");
 classTypes.add("Sleeper (SL)");
 classTypes.add("Second Sitting (2S)");
 

return classTypes;
}


}




##############EXCEPTION HANDLER CONTROLLER ADVICE.JAVA#####################

package com.cts.irctc.exception;


import javax.servlet.http.HttpServletRequest;


import org.springframework.http.HttpStatus;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;
@ControllerAdvice
public class ExceptionHandlerControllerAdvice {

@ExceptionHandler(ApplicationException.class)
@ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR)
public ModelAndView handleResourceNotFound(final ApplicationException exception, final HttpServletRequest request,final Model model) {

//Add code here..
ModelAndView mv=new ModelAndView();
mv.setViewName("error");
mv.addObject("errorMessage","From and to city can't be same");
//add attribute error and timestamp
mv.addObject("responseCode","400");
return mv; //TODO, modify return value
}
}


############TICKET BOOKING .JAVA##############################
package com.cts.irctc.model;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Pattern;



public class TicketBooking {
// Use validation annotations as per the requirement
@NotEmpty(message="Customer name is required")
private String customerName;
@NotEmpty(message="Mobile number is required")
@Pattern(regexp="[7-9]{1}[0-9]{9}",message="Mobile number should be 10 digits and starting with digit 7/8/9")
private String mobileNumber;
private String fromCity;
private String toCity;
private String travelClass;
@Max(value=4, message="No. of tickets must be less than 5")
@Min(value=1, message="No. of tickets must be more than 0")
private int noOfTickets;
private LocalDate dateOfTravel;
private String pnrNumber;
private double totalfareAmount;

public TicketBooking() {
// TODO Auto-generated constructor stub
LocalDate today = LocalDate.now();
today =today.plusDays(1);
dateOfTravel = (today);
}

public TicketBooking(String customerName,String mobileNumber,String fromCity, String toCity, String travelClass,
int noOfTickets,LocalDate dateOfTravel, String pnrNumber, double totalfareAmount) {
super();
this.customerName = customerName;
this.mobileNumber = mobileNumber;
this.fromCity = fromCity;
this.toCity = toCity;
this.travelClass = travelClass;
this.noOfTickets = noOfTickets;
this.dateOfTravel = dateOfTravel;
this.pnrNumber = pnrNumber;
this.totalfareAmount = totalfareAmount;
}

public String getCustomerName() {
return customerName;
}

public void setCustomerName(String customerName) {
this.customerName = customerName;
}

public String getMobileNumber() {
return mobileNumber;
}

public void setMobileNumber(String mobileNumber) {
this.mobileNumber = mobileNumber;
}

public String getFromCity() {
return fromCity;
}

public void setFromCity(String fromCity) {
this.fromCity = fromCity;
}

public String getToCity() {
return toCity;
}

public void setToCity(String toCity) {
this.toCity = toCity;
}

public String getTravelClass() {
return travelClass;
}

public void setTravelClass(String travelClass) {
this.travelClass = travelClass;
}

public int getNoOfTickets() {
return noOfTickets;
}

public void setNoOfTickets(int noOfTickets) {
this.noOfTickets = noOfTickets;
}

public LocalDate getDateOfTravel() {
return dateOfTravel;
}

public void setDateOfTravel(LocalDate dateOfTravel) {
this.dateOfTravel = dateOfTravel;
}

public String getPnrNumber() {
return pnrNumber;
}

public void setPnrNumber(String pnrNumber) {
this.pnrNumber = pnrNumber;
}

public double getTotalfareAmount() {
return totalfareAmount;
}

public void setTotalfareAmount(double totalfareAmount) {
this.totalfareAmount = totalfareAmount;
}


}



##########TRAIN INFO.JAVA##########

package com.cts.irctc.model;

public class TrainInfo {
private String trainNumber;
private String trainName;
private String from;
private String to;
private String tavelClass;
private String departure;
private String duration;
private String arrival;
private double farePerPassenger;

public TrainInfo() {
// TODO Auto-generated constructor stub
}

public TrainInfo(String trainNumber, String trainName, String from, String to, String tavelClass, String departure,
String duration, String arrival, double farePerPassenger) {
super();
this.trainNumber = trainNumber;
this.trainName = trainName;
this.from = from;
this.to = to;
this.tavelClass = tavelClass;
this.departure = departure;
this.duration = duration;
this.arrival = arrival;
this.farePerPassenger = farePerPassenger;
}

public String getTrainNumber() {
return trainNumber;
}

public void setTrainNumber(String trainNumber) {
this.trainNumber = trainNumber;
}

public String getTrainName() {
return trainName;
}

public void setTrainName(String trainName) {
this.trainName = trainName;
}

public String getFrom() {
return from;
}

public void setFrom(String from) {
this.from = from;
}

public String getTo() {
return to;
}

public void setTo(String to) {
this.to = to;
}

public String getTavelClass() {
return tavelClass;
}

public void setTavelClass(String tavelClass) {
this.tavelClass = tavelClass;
}

public String getDeparture() {
return departure;
}

public void setDeparture(String departure) {
this.departure = departure;
}

public String getDuration() {
return duration;
}

public void setDuration(String duration) {
this.duration = duration;
}

public String getArrival() {
return arrival;
}

public void setArrival(String arrival) {
this.arrival = arrival;
}

public double getFarePerPassenger() {
return farePerPassenger;
}

public void setFarePerPassenger(double farePerPassenger) {
this.farePerPassenger = farePerPassenger;
}

}



############# IRCTC SERVICE#####################################

package com.cts.irctc.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.cts.irctc.exception.ApplicationException;
import com.cts.irctc.model.TicketBooking;
import com.cts.irctc.model.TrainInfo;

@Service
public class IrctcService {

public TrainInfo getTicketBookingResult(TicketBooking ticketBooking) throws ApplicationException {

List<TrainInfo> list1 = buildTrains();

if(ticketBooking.getFromCity().equalsIgnoreCase(ticketBooking.getToCity())) {
throw new ApplicationException();
}
else {

String travelClass=ticketBooking.getTravelClass();
String trv=travelClass.substring(travelClass.length()-3,travelClass.length()-1).trim();

for(TrainInfo ti:list1) {

if(ti.getTavelClass().equalsIgnoreCase(trv)&&ti.getFrom().equalsIgnoreCase(ticketBooking.getFromCity()) && ti.getTo().equalsIgnoreCase(ticketBooking.getToCity())) {

return ti;
}
}
}
return null;

}

public String getPNRNumber(TicketBooking ticketBooking) throws ApplicationException {

String firstend = ticketBooking.getMobileNumber().substring(0,7);
// String secend = t.getTrainNumber().substring(0,3);
if(ticketBooking.getFromCity().equalsIgnoreCase(ticketBooking.getToCity())) {
throw new ApplicationException();
}
else {
return "-"+firstend;
}

}

// DO NOT MODIFY THIS METHOD
    //DO NOT MODIFY CODE WITHIN METHOD
private List<TrainInfo> buildTrains() {
List<TrainInfo> trains = new ArrayList<TrainInfo>();
//pune to bangalore
TrainInfo trainInfo1=new TrainInfo("01013", "LTT CBE SPL", "Pune", "Bangalore", "1A", "1:55 AM", "20 hr 30 min", "10:25 PM", 3080);
TrainInfo trainInfo2=new TrainInfo("01013", "LTT CBE SPL", "Pune", "Bangalore", "2A", "1:55 AM", "20 hr 30 min", "10:25 PM", 1825);
TrainInfo trainInfo3=new TrainInfo("01013", "LTT CBE SPL", "Pune", "Bangalore", "3A", "1:55 AM", "20 hr 30 min", "10:25 PM", 1150);
TrainInfo trainInfo4=new TrainInfo("01013", "LTT CBE SPL", "Pune", "Bangalore", "SL", "1:55 AM", "20 hr 30 min", "10:25 PM", 475);
TrainInfo trainInfo5=new TrainInfo("01013", "LTT CBE SPL", "Pune", "Bangalore", "2S", "1:55 AM", "20 hr 30 min", "10:25 PM", 285);

//bagalore to pune
TrainInfo trainInfo6=new TrainInfo("01302", "UDYAN EXP",  "Bangalore", "Pune","1A", "8:20 PM", "19 hr 40 min", "4:00 PM", 3080);
TrainInfo trainInfo7=new TrainInfo("01302", "UDYAN EXP", "Bangalore", "Pune", "2A", "8:20 PM", "19 hr 40 min", "4:00 PM", 1825);
TrainInfo trainInfo8=new TrainInfo("01302", "UDYAN EXP", "Bangalore","Pune",  "3A", "8:20 PM", "19 hr 40 min", "4:00 PM", 1275);
TrainInfo trainInfo9=new TrainInfo("01302", "UDYAN EXP", "Bangalore","Pune",  "SL", "8:20 PM", "19 hr 40 min", "4:00 PM", 475);
TrainInfo trainInfo10=new TrainInfo("01302", "UDYAN EXP", "Bangalore","Pune",  "2S", "8:20 PM", "19 hr 40 min", "4:00 PM", 285);

//chennai to pune
TrainInfo trainInfo11=new TrainInfo("02164", "MAS LTT EXPRESS", "Chennai", "Pune", "2A", "6:25 PM", "16 hr 45 min", "11:10 AM", 2440);
TrainInfo trainInfo12=new TrainInfo("02164", "MAS LTT EXPRESS", "Chennai","Pune",  "3A", "6:25 PM", "16 hr 45 min", "11:10 AM", 1785);
TrainInfo trainInfo13=new TrainInfo("02164", "MAS LTT EXPRESS", "Chennai","Pune",  "SL", "6:25 PM", "16 hr 45 min", "11:10 AM", 685);
TrainInfo trainInfo14=new TrainInfo("02164", "MAS LTT EXPRESS", "Chennai","Pune",  "2S", "6:25 PM", "16 hr 45 min", "11:10 AM", 335);

//bangalore to chennai
TrainInfo trainInfo15=new TrainInfo("02295", "SANGHAMITRA EXP",  "Bangalore","Chennai", "2A", "9:00 AM", "6 hr 15 min", "3:15 PM", 945);
TrainInfo trainInfo16=new TrainInfo("02295", "SANGHAMITRA EXP", "Bangalore", "Chennai", "3A", "9:00 AM", "6 hr 15 min", "3:15 PM", 625);
TrainInfo trainInfo17=new TrainInfo("02295", "SANGHAMITRA EXP", "Bangalore","Chennai",  "SL", "9:00 AM", "6 hr 15 min", "3:15 PM", 265);
TrainInfo trainInfo18=new TrainInfo("02295", "SANGHAMITRA EXP", "Bangalore", "Chennai", "2S", "9:00 AM", "6 hr 15 min", "3:15 PM", 160);

//chennai to bangalore
TrainInfo trainInfo19=new TrainInfo("02296", "DNR SBC SPL",  "Chennai","Bangalore", "2A", "1:55 PM", "6 hr 25 min", "8:20 PM", 945);
TrainInfo trainInfo20=new TrainInfo("02296", "DNR SBC SPL",  "Chennai","Bangalore", "3A", "1:55 PM", "6 hr 25 min", "8:20 PM", 680);
TrainInfo trainInfo21=new TrainInfo("02296", "DNR SBC SPL",  "Chennai","Bangalore", "SL", "1:55 PM", "6 hr 25 min", "8:20 PM", 265);
TrainInfo trainInfo22=new TrainInfo("02296", "DNR SBC SPL",  "Chennai","Bangalore", "2S", "1:55 PM", "6 hr 25 min", "8:20 PM", 160);

trains.add(trainInfo1);
trains.add(trainInfo2);
trains.add(trainInfo3);
trains.add(trainInfo4);
trains.add(trainInfo5);
trains.add(trainInfo6);
trains.add(trainInfo7);
trains.add(trainInfo8);
trains.add(trainInfo9);
trains.add(trainInfo10);
trains.add(trainInfo11);
trains.add(trainInfo12);
trains.add(trainInfo13);
trains.add(trainInfo14);
trains.add(trainInfo15);
trains.add(trainInfo16);
trains.add(trainInfo17);
trains.add(trainInfo18);
trains.add(trainInfo19);
trains.add(trainInfo20);
trains.add(trainInfo21);
trains.add(trainInfo22);

return trains;
}
}


############## APPLICATION.PROPPERTIES################

server.port=2020
spring.mvc.view.prefix=WEB-INF/views/
spring.mvc.view.suffix=.jsp



########ERROR.JSP ###############

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1" isErrorPage="true" isELIgnored="false"%>
   <%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@ taglib prefix="sf" uri="http://www.springframework.org/tags/form"%>
<%@ taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>error page</title>
</head>
<body style="background-color: rgb(200, 240, 300)">
<br>
<br>
<sf:form id="error">
<h3>Unable to book ticket. Below are the error details:</h3>
<h3>Response Code : ${responseCode}</h3>
<h3>Error Message : ${errorMessage}</h3>
</sf:form>
<br/>
<a href="showTicketBookingForm" id="bookTicket">Book Ticket</a>
</body>
</html>


############ TICKET BOOKING.JSP###############

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<%@ taglib prefix="sf" uri="http://www.springframework.org/tags/form"%>
   
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>ticket booking</title>
</head>
<body style="background-color: rgb(200, 240, 300)">
<br>
<br>
<!-- Add code here.. -->
<h1 id="heading" >Indian Railway System</h1>
<sf:form name="form" action="getTicketBookingResultPage" modelAttribute="ticketBooking" method="post">
<table>
<caption style="font-weight:bold;">Book Your Tatkal Ticket</caption>
<tr>
<td>
<sf:label path="customerName">Customer Name:</sf:label>
</td>
<td>
<sf:input path="customerName" id="customerName" />
</td>
<td>
<sf:errors path="customerName" cssStyle="color:red;"/>
</td>
</tr>
<tr>
<td>
<sf:label path="mobileNumber">Mobile Number:</sf:label>
</td>
<td>
<sf:input path="mobileNumber" id="mobileNumber" />
</td>
<td>
<sf:errors path="mobileNumber" cssStyle="color:red;" />
</td>
</tr>
<tr>
<td>
<sf:label path="fromCity">From:</sf:label>
</td>
<td>
<sf:select path="fromCity" id="fromCity">
<sf:options items="${from}" />
</sf:select>
</td>
</tr>
<tr>
<td>
<sf:label path="toCity">To:</sf:label>
</td>
<td>
<sf:select path="toCity" id="toCity">
<sf:options items="${to}" />
</sf:select>
</td>
</tr>
<tr>
<td>
<sf:label path="travelClass">Class:</sf:label>
</td>
<td>
<sf:select path="travelClass" id="travelClass">
<sf:options items="${classType}" />
</sf:select>
</td>
</tr>
<tr>
<td>
<sf:label path="noOfTickets">No. of Tickets:</sf:label>
</td>
<td>
<sf:input path="noOfTickets" id="noOfTickets" />
</td>
<td>
<sf:errors path="noOfTickets" cssStyle="color:red;" />
</td>
</tr>
<tr>
<td>
<input type="submit" id=”submit” name=”submit” value="Book" />
</td>
<td>
<input type="reset" value="Clear" />
</td>
</tr>
</table>






</sf:form>
 
</body>
</html>


############## TICKET BOOKING RESULT.JSP###############
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
pageEncoding="ISO-8859-1" isELIgnored="false"%>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@ taglib prefix="sf" uri="http://www.springframework.org/tags/form"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>ticket booking result</title>
</head>
<body style="background-color: rgb(200, 240, 300)">
<br>
<br>

<h3 id="ticket" >Congratulations, your ticket got booked!!</h3>
<table  border="1">
<tr style="background-color:yellow">
<td>PNR Number:</td>
<td>${pnr}</td>
</tr>
<tr>
<td>Train Number:</td>
<td>${tno}</td>
</tr>
<tr>
<td>Train Name:</td>
<td>${tname}</td>
</tr>
<tr>
<td>Date of Travel:</td>
<td>${dot}</td>
</tr>
<tr>
<td>Depature:</td>
<td>${dept}</td>
</tr>
<tr>
<td>Duration:</td>
<td>${duration}</td>
</tr>
<tr>
<td>Arrival:</td>
<td>${a}</td>
</tr>
<tr>
<td>Total Fare Amount:</td>
<td>${price}</td>
</tr>
<tr>
</table>
<br/>
<a href="showTicketBookingForm" id="bookTicket">Book Another Ticket</a>



</body>
</html>



############# TRAIN NOT AVALIABLE.JSP###############

<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body style="background-color: rgb(200, 240, 300)">
<br>
<br>
<!--Add code here  -->

<h3 id="noResult">Sorry, currently no train available for given details!!!</h3>

<a href="showTicketBookingForm" id="bookTicket">Book Different Ticket</a>
</body>
</html>



